AOP : 관점지향 프로그래밍

ex.은행
주된업무(Core Concern) : 입금, 출금, 이체
보조업무(공통사항)(Cross Cutting Concern) : 로깅, 보안, 트랜잭션

Aop적인 프로그램을 짠것 : Filter - 한글처리 (사이트 들어가고, 나갈때 무조건 통과해야하는)

프록시(가짜) - 우회시켜서 다른데로 가게 가로챔 


------------------------------
조인포인트 : 횡단관심 모듈의 기능이 삽입되어 동작될 수 있는 위치 
(스프링 프레임워크는 합류하는 지점 = 조인포인트가 method뿐)

포인트컷 : 조인포인트의 하위개념 
                 어떤 클래스에서 조인포인트를 사용할지 결정
          
         5개의 조인포인트(함수)중에서 몇개만 포인트컷으로 고르는 것 - 어떤건 보조업무를 걸고, 안걸고 

어드바이스 : 수많은 함수중에 포인트컷을 잡았는데, 어떤 보조업무를 실행시킬것인지 결정
          (조인포인트에서 삽입되어 동작되어질 코드)
         -Before advice : 메서드 실행전에 적용되는 실행 
         -After returning advice : 메서드가 정상적으로 실행된 후에 실행  (예외를 던지는 상황은 정상적인 상황에서 제외)
         -After throwing advice : 예외를 발생시킬 때 적용되는 Advice를 정의 (catch와 비슷)
         -Around advice : 메서드 호출 이전, 이후, 예외 발생 등 모든 시점에서 적용 가능한 Advice를 정의 
         
         before : 주업무 전에 있는거 
         around : 주업무 전 ,후 다 있는것 
         after : 주업무 후에만 있는것
         after throwing : 주업무 후에 예외처리 

위빙 : 포인트컷에 의해서 결정된 조인포인트에 지정된 어드바이스를 삽입하는 과정 

에스펙트 : 포인트 컷과 어드바이스를 합쳐놓은것 (어떤관점에다가 어떤 공통관심을 놓을지 확정됐니?)
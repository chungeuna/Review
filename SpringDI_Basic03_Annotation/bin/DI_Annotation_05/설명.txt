Spring 통해서 (객체의 생성 과 조립(injection))

1. xml 설정을 통해서 (bean 생성 , injection)
2. xml 문서 없이도 지금과 같은 동일 작업 가능 
   >> 자바코드 이용해서 설정 작업(JAVA 파일 + Annotation)
   >> xml 파일 (x)

3. 기존 xml :
new GenericXmlApplicationContext("classpath:DI_Annotation_04/DI_Annotation_04.xml");

   현재 java :
new AnnotationConfigApplicationContext(ConfigContext.class);   

 - ConfigContext.class : 어노테이션을 갖고있는 클래스  (xml 대체하는 파일)  > 컨테이너안에 빈을 만들고 injection 방법 > 어노테이션 기법 
 
사용 어노테이션은
1.  @Configuration :해당 클래스가 [스프링의 설정]으로 사용됨을 지정 (xml을 대체 할 거야)
    ex)
    @Configuration
    public class configcontext {}

2.  @Bean
    ex)
    @Configuration
    public class configcontext {
      
       @Bean
       public User user(){
         return new User();
       }
       
       xml 에서 아래코드과 같은 형태를 위 코드처럼 함수(method) 의 형태로 설계 
       <bean id="user" class="DI.User">
             >> 함수이름 : id 값 리턴 객체 : class 
    }
    
result :
> 어노테이션과 [메서드 이름]을 이용해서 스프링 컨테이너가 사용할 빈 객체 설정
> 메서드가 리턴하는 객체를 빈객체로 사용하겠다

class MemberRegisterService{
   private MemberDao memberdao;
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}
//밖에서 new 하면 복합 연관 
//집합연관 : 안에서 
1. xml 설정
<bean id="memberRegSvc" class="MemberRegisterService">
  <constructor-arg  ref="memberdao">
</bean>
<bean id="memberdao" class="MemberDao" />
  
  
   
1.1 추가 : @Autowired 적용
class MemberRegisterService{
   private MemberDao memberdao;
   
   @Autowired
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}   
 
xml 문서
<context:annotation-config />   
<bean id="memberRegSvc" class="MemberRegisterService"></bean>
<bean id="memberdao" class="MemberDao" />   
 
 
   
   
2. @Configuration
   @bean
   두개의 어노테이션을 이용해서 (java 코드 기반의 작업)
   
   @Configuration
   class Configcontext{
         
         @bean
         public MemberRegisterService memberRegSvc(){
           return new MemberRegisterService(memberdao()); //함수를 통한 주입
         } 
         	//생성자 함수에다가 injection > 빈객체를 생성자를 통해 호출  (dao 객체 주소값을 memberdao 함수가 갖고 있다 
         @bean
         public MemberDao memberdao(){ //public 없어도 된다 (내부에서만 사용하는 함수) 
          return new MemberDao();
         }
   }
   
-------------------------------------------------------------
옵션 :
<bean id="m" class="board"></bean>

=> 자바코드
@bean
public board m(){
  return new board();
}

옵션_1
@bean(name="hello")
public board m(){
  return new board();
}


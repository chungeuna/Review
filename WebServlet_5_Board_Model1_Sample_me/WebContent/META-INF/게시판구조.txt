1. 현재 프로젝트 게시판 만들기 연습(Model1 방식으로)
1.1 [JSP]가 [클라이언트] 요청을 받고 흐름을 제어

단) Model >  DTO,DAO 사용 

단) Servlet 사용하지 않아요 (여기서만)

1.2 
<form action="loginok.jsp"> 코딩 

==> 이렇게 바꿀 것 

1.3 Model2 기반의 MVC
[servlet]이 [클라이언트] 요청을 받고 흐름을 제어

<form action="Memolist"> 코딩 

--------------------------------------
게시판 만들기 

1. DB 설계 테이블 만들기 
1.1 요구사항 파악
게시판 종류 파악 
-일반 게시판 (답글X) > 공지사항 게시판 
-답변(답글) 계층형 게시판 >> 답글이 있다 
-일반 게시판이나 답변(계층형) 게시판은 : 댓글 게시판 (옵션) : 비동기 >> 기능적 요구사항 

게시판(일반,계층형)
-회원 전용 게시판 
-비회원 전용 게시판  

일반 게시판: 회원전용 (로그인한 사용자 (권한처리 : session) )
일반 게시판: 비회원 (비번 처리 필요 : 글 수정, 삭제 권한처리)  > 글쓴이, 비번

계층형 게시판 : 회원전용 (로그인한 사용자 (권한처리 : session) )
계층형 게시판 : 비회원 (비번 처리 필요 : 글 수정, 삭제 권한처리)  > 글쓴이, 비번

-------------------------------------
테이블 설계 
비인증형 일반 게시판 
create table board (
idx number constraint pk_board_idx_primary_key,
--글번호(오라클: sequence 객체) mysql or mssql :increment 자동증가 
writer varchar2(30) not null,
--글쓴이(필수 입력 사항: 회원 전용 > 로그인한 ID값 (session) , 비회원인 경우 입력을 받아야한다 
pwd varchar2(30) not null,
--회원 전용에서는 없어지고, 비회원 게시판만 있다
subject varchar2(50) not null, --글의 제목
content varchar2(2000) not null --글 내용 
filename varchar2(50),--파일 명 또는 파일의 경로 (note.hwp)
filesize number,  --옵션

writedate date default SYSDATE --글쓴 날짜 ,기본값 설정 
readnum number default 0, --글 조회수, 업무 로직 구현, 같은 session.....로직 어렵당,,,, 조작할 수도 
homepage varchar2(20), --옵션 
email varchar2(20), --옵션  .. 필수 입력사항이 아니기 때문에 null 허용 

);

--------------------------------------------------------------------
비인증형 계층형 게시판

create table multiboard (
idx number constraint pk_board_idx_primary_key,
--글번호(오라클: sequence 객체) mysql or mssql :increment 자동증가 
writer varchar2(30) not null,
--글쓴이(필수 입력 사항: 회원 전용 > 로그인한 ID값 (session) , 비회원인 경우 입력을 받아야한다 
pwd varchar2(30) not null,
--회원 전용에서는 없어지고, 비회원 게시판만 있다
subject varchar2(50) not null, --글의 제목
content varchar2(2000) not null --글 내용 
filename varchar2(50),--파일 명 또는 파일의 경로 (note.hwp)
filesize number,  --옵션

writedate date default SYSDATE --글쓴 날짜 ,기본값 설정 
readnum number default 0, --글 조회수, 업무 로직 구현, 같은 session.....로직 어렵당,,,, 조작할 수도 
homepage varchar2(20), --옵션 
email varchar2(20), --옵션  .. 필수 입력사항이 아니기 때문에 null 허용 

--추가적인 컬럼이 들어간다 
refer number default 0, --참조글 또는 글의 그룹번호 
depth number default 0, --글의 깊이 들여쓰기 >> 화면처리가 목적 로직(x) 
step number default 0 --글의 정렬 순서, 답글 정렬 

);
 
 ref: 읽은 글이 갖고있는  ref값 갖고 있다 >> 식구
 
 idx, ref , depth, step, title 
 1    1     0      0     원본글1 
 2	  2	    0      0          원본글2
 3    1     1      1     원본글1 답글-1 (원본글: idx 1) 
 4    2     1      1     원본글2 답글 -1 (원본글 : idx 2)
 5    1     2      2(+1) >3  >4  원본글1 답글 -1 답글 -1 (읽고있는 글 idx 3) 
 6	  1     2      2    >3     원본글1 답글-1 (읽고있는 글 idx 3) 
 7	  1	    2      2
 -----
 > 일반게시판 
 select * from baord order by idx desc(최신글이 위에) 
 
 > 계층형 게시판 
 논리 2가지 
 1. 최신 답글을 위로 
 2. 답글 쓴 순서대로 
 
 1. 최신 답글을 위로 
 규칙: 원본글 : depth, step >> 0 0
 현재 read한 글의 step값보다 더 큰  step값이 있다면 +1 한다 (같은 ref에서) 
         답글   : depth +1 step +1
select * from multiboard order by ref desc, step asc        
          
order by ref desc, step asc 
화면에 출력 
idx 
2   2 0 0 
>4  2 1 1 
1   1 0 0
>3  1 1 1
>>7 1 2 2
>>6 1 2 3 
>5  1 2 4

select * from multiboard order by ref desc , step asc
update multiboard set step= step+1 where refer =? and step > ? 

pstmt.setInt(9, depth+1); // 규칙 현재 읽은 글에 depth + 1
pstmt.setInt(10, step+1); // 순서 update 통해서  자리 확보 + 1				    		   
-------------------------------------------------------------------
select * from multiboard order by ref desc, step desc
update multiboard set step=step+1 where refer=? and step >= ?

-------------------------------------
--순번처리(oracle) 
create sequence board_idx
start with 1
increment by 1 ;
-------------------------------------
--댓글 달기 (꼬리말)을 위한 테이블 생성 
--댓글은 누구의 댓글인가?
--일반 게시판 글번호 .... 필요

create table reply(
	no number primary key,
	writer varchar2(30), 
	pwd varchar2(30),
	content varchar2(2000),
	writedate date default sysdate,
	idx number not null	
);
alter table reply
add constraint fk_reply_deptno foreign key(idx) references board(idx);

--reply에 있는 글번호는 board테이블의 idx를 참조한다 

board 원본글
10, 방가방가, ....
누군가 1번글에 댓글을 단다
>> reply라는 테이블에 insert가 되어야 한다 
현재 내가 읽은 글의 글번호를 들고와야한다

insert into reply(no,...idx) into values(1,...10) 
select idx from board where idx=10;

reply 댓글 
1, 나도 방가, ..., 10
2, 방가, .... ,10 

--
board 10 read하면 reply에서 데이터 갖고와야한다 
select * from reply where idx=10;

----------------------
개발 ....(목적: 게시판의 흐름 이해) 

모델1 방식의 개발코드 작업 
> 요청을 jsp가 처리  > Model(dao,dto) > 요청 <form action="ok.jsp">
									   <a href="board_write.jsp"> 

모델2 방식의 개발 
> 요청을 servlet 처리  > Model(dao,dto) > 요청 <form action="ok.do">
										 <a href="board_write.do"> 
------------------------------------------
요청을 받고 화면 처리 -> jsp 
WebContent > login.jsp, lobinok.jsp ..(Model1 설치)
WebContent > WEB-INF > Views > login.jsp > loginok.jsp (Model2 설계) 

WebContent > 폴더 구조 
> board > list.jsp, write.jsp 
> member > memberlist.jsp, memberwrite.jsp  >images 폴더  > ...> css 폴더 ...
> images > 공통이미지 
> css > common.css 
> js > commmon.js
> include > top.jsp, bottom.jsp 


서비스 데이터 처리 : java(Model) 
kr.or.bit.dto > 데이터 1건을 담을 수 있는 클래스 
kr.or.bit.dao > db연결하고 CRUD할 수 있는 클래스
kr.or.bit.service  > 업무 수행 (로그인, 회원가입) dto 또는 dao 객체 생성해서 사용한다 
추가(문자처리, 날짜처리, 페이징처리, DB연결 ...) 
별도의 클래스 
kr.or.bit.utils 
-------------------------------
배포 (조원들에게 배포) 
-----------
글쓰기, 글읽기, 답글, 댓글, ...

** 업무 하나당 ** 
** 화면단(jsp) + 로직 처리(jsp) **
**login.jsp + loginok.jsp **

1.board_write.jsp : 글쓰기 (ui -> form (input) -> submit(유효성 검증))
주의사항 : <input name="" .. 서버에 데이터 받기 가능 
주의사항: action = "처리단"

2. board_writeok.jsp  : 글쓰기 처리 (한글 처리 > 데이터 받기 >[ DB 연결 > insert >처리(성공) ](서비스 담당)> 목록 이동 (list) 
주의사항 : insert 실패 처리  (DB not null >> insert ..) , 중복값(sequence) , 타입 크기 (고민) 

 DB 연결 > insert >처리(성공)  > 서비스 담당 
 
Model(dto,dao,service) 
jsp는 dao를 직접적으로 관리하지 않는다 ... jsp 는 서비스만 관리 
..jsp 안에서 dao 객체를 생성하지 않는다 ... service한테 맡긴다 

board_writeOK.jsp
DTO > class Message { private String title; }
JSP > Message message = new Message();
JSP > message.setTitle(request.getParameter("title");
boardservice service = boardservice.getInstance();

int result = service.writeOK(message);
>> boardservice >> public void writeOk(Message m) { Dao dao = new Dao(); dao.writeOk(m); }

클라이언트
board_write.jsp ->
board_writeOK.jsp  (>>데이터 받기 -> DTO 생성하기 -> DTO 데이터 넣기)->
 서비스 객체를 다룬다 -> BoardDao를 다룬다 -> 서비스 객체 -> 
board_writeOK .jsp에게 다시 결과 return -> 페이지 이동처리 (board_list.jsp or board_write.jsp) 

board_list.jsp: 게시글 목록 보여주기 
화면에 출력 : 글번호, 글제목, 글쓴 날짜, 조회수
글의 내용(상세보기) 제외 
select 글번호, 글제목, 글쓴 날짜, 조회수 


select * from jspboard order by refer desc, step asc

board_list.jsp 요청 >> 서비스 객체 >> dao (dao 함수 >> 리턴  board 배열 List<board>) >> 서비스 객체 리턴(List<board>)
>>board_list.jsp >> 화면에다가 출력 >> <c:forEach var="board" items="<%= list%>">

주의사항(중요)
1.링크구현(제목: 처리) -> parameter(get) -> idx 필수 -> 
2.페이징 처리 
3.EL &JSTL (제어문) 

-----------
board_content.jsp 상세페이지 
글 번호 받기  > idx값  -> select해서 where idx= ? 화면에 출력 > 고정된 화면 에다가 출력

-> 목록, 수정, 삭제 
-> board_list.jsp?cp=1 & ps=5
-> 수정: 글번호 board_edit.jsp?idx= 
-> 삭제: 글번호 board_delete.jsp?idx= 

댓글(reply) :ui 구성 기타 요소들 구성,처리 

상세 페이지 기능 추가 
>> 글 조회수 증가 시킨다 (update readnum= readnum +1) 
같은 계정 .. 같은 날짜.. 조회수 증가에 대한 제한을 둘 수 있다 


-----
board_delete.jsp 삭제하기 
board_delte.jsp?idx=1 
1. delete from jspboard where idx= ?

삭제하기(회원, 비회원) 
회원 전용: 상세보기 -> 로그인 id 와 글쓴 id 같으면 (삭제) 
				-> 같지 않으면 삭제 안보이게 
비회원 전용 : 화면(ui) -> 비밀번호 확인(입력받기) 

-> board_delete.jsp(ui: 비밀번호 입력) 
-> board_delte.jsp(삭제 처리) 
-> 삭제(글번호, 비밀번호) 
-> delete from jspboard where idx = ? and pwd = ? 
-> 삭제가 되면 목록 이동 



				










